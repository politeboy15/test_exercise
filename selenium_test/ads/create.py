import pytest
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import os
import time


class TestCreateAd:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    
    def test_create_ad_page_loads(self, authenticated_driver, base_url):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        authenticated_driver.get(f"{base_url}/create_ad/")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        assert "Create Ad" in authenticated_driver.title
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        form = authenticated_driver.find_element(By.TAG_NAME, "form")
        assert form.is_displayed()
        
    def test_create_ad_form_elements(self, authenticated_driver, base_url):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        authenticated_driver.get(f"{base_url}/create_ad/")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        submit_button = authenticated_driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        assert submit_button.is_displayed()
        assert submit_button.text == "Create Ad"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
        csrf_token = authenticated_driver.find_element(By.NAME, "csrfmiddlewaretoken")
        assert csrf_token.get_attribute("value") is not None
        
    def test_home_button_exists(self, authenticated_driver, base_url):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–º–æ–π"""
        authenticated_driver.get(f"{base_url}/create_ad/")
        
        home_link = authenticated_driver.find_element(By.LINK_TEXT, "üè† –î–æ–º–æ–π")
        assert home_link.is_displayed()
        assert home_link.get_attribute("href") == f"{base_url}/"
        
    def test_home_button_confirmation(self, authenticated_driver, base_url):
        """–¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –¥–æ–º–æ–π"""
        authenticated_driver.get(f"{base_url}/create_ad/")
        
        home_link = authenticated_driver.find_element(By.LINK_TEXT, "üè† –î–æ–º–æ–π")
        onclick_attr = home_link.get_attribute("onclick")
        
        assert "confirm" in onclick_attr
        assert "–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É" in onclick_attr
        
    def test_create_ad_requires_authentication(self, driver, base_url):
        """–¢–µ—Å—Ç, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        driver.get(f"{base_url}/create_ad/")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        WebDriverWait(driver, 10).until(
            lambda d: "/signin/" in d.current_url or "login" in d.current_url.lower()
        )
        
        assert "/signin/" in driver.current_url or "login" in driver.current_url.lower()
        
    def test_create_ad_with_valid_data(self, authenticated_driver, base_url, test_ad_data):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        authenticated_driver.get(f"{base_url}/create_ad/")
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –∏–º–µ–µ—Ç –ø–æ–ª—è title –∏ description
        # (—Ç–æ—á–Ω—ã–µ –ø–æ–ª—è –∑–∞–≤–∏—Å—è—Ç –æ—Ç Django —Ñ–æ—Ä–º—ã)
        try:
            title_field = authenticated_driver.find_element(By.NAME, "title")
            description_field = authenticated_driver.find_element(By.NAME, "description")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            title_field.send_keys(test_ad_data["title"])
            description_field.send_keys(test_ad_data["description"])
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–µ
            try:
                image_field = authenticated_driver.find_element(By.NAME, "image")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                # image_field.send_keys("/path/to/test/image.jpg")
            except:
                pass
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            submit_button = authenticated_driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            submit_button.click()
            
            # –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
            WebDriverWait(authenticated_driver, 10).until(
                lambda d: d.current_url != f"{base_url}/create_ad/"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
            assert "/create_ad/" not in authenticated_driver.current_url
            
        except Exception as e:
            # –ï—Å–ª–∏ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
            pytest.skip(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—è —Ñ–æ—Ä–º—ã: {e}")
            
    def test_create_ad_with_empty_form(self, authenticated_driver, base_url):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø—É—Å—Ç–æ–π —Ñ–æ—Ä–º–æ–π"""
        authenticated_driver.get(f"{base_url}/create_ad/")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É
        submit_button = authenticated_driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        submit_button.click()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–∑–¥–∞–Ω–∏—è
        # (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –µ—â–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        assert "/create_ad/" in authenticated_driver.current_url
        
    def test_create_ad_with_image_upload(self, authenticated_driver, base_url, test_ad_data):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        authenticated_driver.get(f"{base_url}/create_ad/")
        
        try:
            # –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            title_field = authenticated_driver.find_element(By.NAME, "title")
            description_field = authenticated_driver.find_element(By.NAME, "description")
            image_field = authenticated_driver.find_element(By.NAME, "image")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
            title_field.send_keys(test_ad_data["title"])
            description_field.send_keys(test_ad_data["description"])
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            test_image_path = self.create_test_image()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_field.send_keys(test_image_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            submit_button = authenticated_driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            submit_button.click()
            
            # –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            WebDriverWait(authenticated_driver, 10).until(
                lambda d: d.current_url != f"{base_url}/create_ad/"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
            assert "/create_ad/" not in authenticated_driver.current_url
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(test_image_path):
                os.remove(test_image_path)
                
        except Exception as e:
            pytest.skip(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            
    def test_create_ad_with_large_image(self, authenticated_driver, base_url, test_ad_data):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –±–æ–ª—å—à–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        authenticated_driver.get(f"{base_url}/create_ad/")
        
        try:
            # –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            title_field = authenticated_driver.find_element(By.NAME, "title")
            description_field = authenticated_driver.find_element(By.NAME, "description")
            image_field = authenticated_driver.find_element(By.NAME, "image")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
            title_field.send_keys(test_ad_data["title"])
            description_field.send_keys(test_ad_data["description"])
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
            test_image_path = self.create_large_test_image()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_field.send_keys(test_image_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            submit_button = authenticated_driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            submit_button.click()
            
            # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ —Ä–∞–∑–º–µ—Ä–µ —Ñ–∞–π–ª–∞)
            time.sleep(3)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(test_image_path):
                os.remove(test_image_path)
                
        except Exception as e:
            pytest.skip(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            
    def test_create_ad_with_invalid_file_type(self, authenticated_driver, base_url, test_ad_data):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ç–∏–ø–æ–º —Ñ–∞–π–ª–∞"""
        authenticated_driver.get(f"{base_url}/create_ad/")
        
        try:
            # –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            title_field = authenticated_driver.find_element(By.NAME, "title")
            description_field = authenticated_driver.find_element(By.NAME, "description")
            image_field = authenticated_driver.find_element(By.NAME, "image")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
            title_field.send_keys(test_ad_data["title"])
            description_field.send_keys(test_ad_data["description"])
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞
            test_file_path = self.create_test_text_file()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            image_field.send_keys(test_file_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            submit_button = authenticated_driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            submit_button.click()
            
            # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–∑–¥–∞–Ω–∏—è
            assert "/create_ad/" in authenticated_driver.current_url
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(test_file_path):
                os.remove(test_file_path)
                
        except Exception as e:
            pytest.skip(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {e}")
            
    def create_test_image(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        import tempfile
        from PIL import Image
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.jpg')
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (100, 100), color='red')
        img.save(temp_file.name)
        
        return temp_file.name
        
    def create_large_test_image(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        import tempfile
        from PIL import Image
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.jpg')
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5000x5000)
        img = Image.new('RGB', (5000, 5000), color='blue')
        img.save(temp_file.name)
        
        return temp_file.name
        
    def create_test_text_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        import tempfile
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.txt')
        temp_file.write(b"This is a test text file")
        temp_file.close()
        
        return temp_file.name